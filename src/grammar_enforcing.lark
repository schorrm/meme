// Grammar for parsing.
// Variant where grammar handles language checks

start: "/" block+
block: (_layout_block | _format_block) (";" _format_block)* "/"

_layout_block: (textblock
            | memeblock
            | compositeblock
            | whitespaceprefix
            | endcomposite)
            
textblock: "T" ":" (text) (":" position)? //(":" rotation)?
memeblock: "M" ((":" imagehandle?) (":" size?)? (":" fillcolor?)? (":" gridposition?)? (":" mode?)?)? //(":" gridposition?)?
compositeblock: "C" (":" gridsize)? (":" gridposition)?
whitespaceprefix: "WP:" text
endcomposite: "END" // Perhaps: END: PARAM

fillcolor: COLOR
size: INT "x" INT
gridsize: INT "x" INT
gridposition: INT "," INT
mode: RESIZE_MODE
bbox: SIZEDIR "," SIZEDIR "," SIZEDIR "," SIZEDIR

RESIZE_MODE: "resize" | "crop" | "fill"

text: VALID_BLOCK
imagehandle: IMGH
// local_image | library_image
// library_image: IMGH
// local_image: "." IMGH // TODO: maybe change this to some character that breaks URIs, like ^? 
IMGH: ("-" | "_" | LETTER | DIGIT | ".")+

_format_block: font
            | textstyle
            | colorblock
            | align

colorblock: "CL" (colorarg) ~ 0..3
colorarg: ":" COLOR?
COLOR: LETTER+ | HEXCOLOR
HEXCOLOR: "#" (HEXDIGIT ~ 3) ~ 1..2
align: "AL" (halign valign?)?

halign: ":" COLUMN?
valign: ":" HEIGHTAL
COLUMN: "right" | "center" | "left" | "r" | "c" | "l" 
HEIGHTAL:  "top" | "center" | "bottom" | "t" | "c" | "b" | "rtop" | "rbottom" | "rcenter" | "ltop" | "lbottom"| "lcenter"

font: "F" (fontname (":" FONTSIZE?)? (":" OUTLINESIZE)?)?

fontname:  ":" CNAME?
OUTLINESIZE: INT
FONTSIZE: INT // Removed ("pt" | "px" | "em")
SIZEDIR: INT ("%" | "px")?

textstyle: "TS" (":" TEXSTYLEDIR*)?
TEXSTYLEDIR: "b" | "u" | "s" | "i"

rotation: SIGNED_NUMBER
position: position_indir | bbox
position_indir: HEIGHTAL | INDEXCOL
INDEXCOL: COLUMN INT

instance: fun arg*
scoped: ";" instance
fun: VALID_BLOCK
arg: ":" VALID_BLOCK

_TILDE_SOLVE.2: /((~~)+)(?=[\/:;])/
_ESCAPE_SAFE: /(.+?)(?<!~)(~~)*?(?=[\/:;])/ // 
VALID_BLOCK: _TILDE_SOLVE | _ESCAPE_SAFE // Order here is crucial for some reason
// _TILDE_SOLVE:  /(~~)+?(?=[\/:])/

%import common.CNAME
%import common.LETTER
%import common.DIGIT
%import common.HEXDIGIT
%import common.SIGNED_NUMBER
%import common.INT
%import common.ESCAPED_STRING
